<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree toc="true" numbered="true" show-heading="true" show-metadata="true" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
  <fr:frontmatter>
    <fr:anchor>541</fr:anchor>
    <fr:addr type="user">mathur-kini-viswanathan-shb-2018</fr:addr>
    <fr:route>mathur-kini-viswanathan-shb-2018.xml</fr:route>
    <fr:title text="What happens-after the first race? Enhancing the predictive power of happens-before based dynamic race detection">What happens-after the first race? Enhancing the predictive power of happens-before based dynamic race detection</fr:title>
    <fr:taxon>Reference</fr:taxon>
    <fr:date>
      <fr:year>2018</fr:year>
      <fr:month>10</fr:month>
    </fr:date>
    <fr:authors>
      <fr:author>
        <fr:link type="local" href="umangmathur.xml" addr="umangmathur" title="Umang Mathur">Umang Mathur</fr:link>
      </fr:author>
      <fr:author>Dileep Kini</fr:author>
      <fr:author>
        <fr:link type="local" href="maheshviswanathan.xml" addr="maheshviswanathan" title="Mahesh Viswanathan">Mahesh Viswanathan</fr:link>
      </fr:author>
    </fr:authors>
    <fr:meta name="bibtex"><![CDATA[@article{10.1145/3276515,
author = {Mathur, Umang and Kini, Dileep and Viswanathan, Mahesh},
title = {What happens-after the first race? enhancing the predictive power of happens-before based dynamic race detection},
year = {2018},
issue_date = {November 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {OOPSLA},
url = {https://doi.org/10.1145/3276515},
doi = {10.1145/3276515},
abstract = {Dynamic race detection is the problem of determining if an observed program execution reveals the presence of a data race in a program. The classical approach to solving this problem is to detect if there is a pair of conflicting memory accesses that are unordered by Lamport’s happens-before (HB) relation. HB based race detection is known to not report false positives, i.e., it is sound. However, the soundness guarantee of HB only promises that the first pair of unordered, conflicting events is a schedulable data race. That is, there can be pairs of HB-unordered conflicting data accesses that are not schedulable races because there is no reordering of the events of the execution, where the events in race can be executed immediately after each other. We introduce a new partial order, called schedulable happens-before (SHB) that exactly characterizes the pairs of schedulable data races — every pair of conflicting data accesses that are identified by SHB can be scheduled, and every HB-race that can be scheduled is identified by SHB. Thus, the SHB partial order is truly sound. We present a linear time, vector clock algorithm to detect schedulable races using SHB. Our experiments demonstrate the value of our algorithm for dynamic race detection — SHB incurs only little performance overhead and can scale to executions from real-world software applications without compromising soundness.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {145},
numpages = {29},
keywords = {Concurrency, Dynamic Program Analysis, Happens-Before, Race Detection, Soundness}
}]]></fr:meta>
    <fr:meta name="doi">10.1145/3276515</fr:meta>
  </fr:frontmatter>
  <fr:mainmatter />
  <fr:backmatter />
</fr:tree>
