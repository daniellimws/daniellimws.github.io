<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>540</fr:anchor><fr:addr
type="user">marino-musuvathi-narayanasamy-literace-2009</fr:addr><fr:route>marino-musuvathi-narayanasamy-literace-2009.xml</fr:route><fr:title
text="LiteRace: effective sampling for lightweight data-race detection">LiteRace: effective sampling for lightweight data-race detection</fr:title><fr:taxon>Reference</fr:taxon><fr:date><fr:year>2009</fr:year><fr:month>6</fr:month></fr:date><fr:authors><fr:author>Daniel Marino</fr:author><fr:author>Madanlal Musuvathi</fr:author><fr:author>Satish Narayanasamy</fr:author></fr:authors><fr:meta
name="bibtex"><![CDATA[@inproceedings{10.1145/1542476.1542491,
author = {Marino, Daniel and Musuvathi, Madanlal and Narayanasamy, Satish},
title = {LiteRace: effective sampling for lightweight data-race detection},
year = {2009},
isbn = {9781605583921},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1542476.1542491},
doi = {10.1145/1542476.1542491},
abstract = {Data races are one of the most common and subtle causes of pernicious concurrency bugs. Static techniques for preventing data races are overly conservative and do not scale well to large programs. Past research has produced several dynamic data race detectors that can be applied to large programs. They are precise in the sense that they only report actual data races. However, dynamic data race detectors incur a high performance overhead, slowing down a program's execution by an order of magnitude.In this paper we present LiteRace, a very lightweight data race detector that samples and analyzes only selected portions of a program's execution. We show that it is possible to sample a multithreaded program at a low frequency, and yet, find infrequently occurring data races. We implemented LiteRace using Microsoft's Phoenix compiler. Our experiments with several Microsoft programs, Apache, and Firefox show that LiteRace is able to find more than 70\% of data races by sampling less than 2\% of memory accesses in a given program execution.},
booktitle = {Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {134–143},
numpages = {10},
keywords = {concurrency bugs, dynamic data race detection, sampling},
location = {Dublin, Ireland},
series = {PLDI '09}
}

@article{10.1145/1543135.1542491,
author = {Marino, Daniel and Musuvathi, Madanlal and Narayanasamy, Satish},
title = {LiteRace: effective sampling for lightweight data-race detection},
year = {2009},
issue_date = {June 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {44},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/1543135.1542491},
doi = {10.1145/1543135.1542491},
abstract = {Data races are one of the most common and subtle causes of pernicious concurrency bugs. Static techniques for preventing data races are overly conservative and do not scale well to large programs. Past research has produced several dynamic data race detectors that can be applied to large programs. They are precise in the sense that they only report actual data races. However, dynamic data race detectors incur a high performance overhead, slowing down a program's execution by an order of magnitude.In this paper we present LiteRace, a very lightweight data race detector that samples and analyzes only selected portions of a program's execution. We show that it is possible to sample a multithreaded program at a low frequency, and yet, find infrequently occurring data races. We implemented LiteRace using Microsoft's Phoenix compiler. Our experiments with several Microsoft programs, Apache, and Firefox show that LiteRace is able to find more than 70\% of data races by sampling less than 2\% of memory accesses in a given program execution.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {134–143},
numpages = {10},
keywords = {concurrency bugs, dynamic data race detection, sampling}
}]]></fr:meta><fr:meta
name="doi">10.1145/1542476.1542491</fr:meta></fr:frontmatter><fr:mainmatter /><fr:backmatter /></fr:tree>