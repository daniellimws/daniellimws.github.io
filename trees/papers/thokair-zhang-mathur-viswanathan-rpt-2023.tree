\import{base-macros}

\title{Dynamic Race Detection with O(1) Samples}
\date{2023-1}
\taxon{reference}

\author{zhendongang}
\author{umangmathur}
\tag{racepred}
\tag{sampling-race}
\tag{paper}
\meta{bibtex}\verb<<<|
@article{10.1145/3571238,
author = {Thokair, Mosaad Al and Zhang, Minjian and Mathur, Umang and Viswanathan, Mahesh},
title = {Dynamic Race Detection with O(1) Samples},
year = {2023},
issue_date = {January 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {POPL},
url = {https://doi.org/10.1145/3571238},
doi = {10.1145/3571238},
abstract = {Happens before-based dynamic analysis is the go-to technique for detecting data races in large scale software projects due to the absence of false positive reports. However, such analyses are expensive since they employ expensive vector clock updates at each event, rendering them usable only for in-house testing. In this paper, we present a sampling-based, randomized race detector that processes only constantly many events of the input trace even in the worst case. This is the first sub-linear time (i.e., running in o(n) time where n is the length of the trace) dynamic race detection algorithm; previous sampling based approaches like  run in linear time (i.e., O(n)). Our algorithm is a property tester for -race detection â€” it is sound in that it never reports any false positive, and on traces that are far, with respect to hamming distance, from any race-free trace, the algorithm detects an -race with high probability. Our experimental evaluation of the algorithm and its comparison with state-of-the-art deterministic and sampling based race detectors shows that the algorithm does indeed have significantly low running time, and detects races quite often.},
journal = {Proc. ACM Program. Lang.},
month = {jan},
articleno = {45},
numpages = {30},
keywords = {Concurrency - Shared memory, Dynamic program analysis, Happens-before race detection, Property testing}
}<<<

\meta{doi}{10.1145/3632915}