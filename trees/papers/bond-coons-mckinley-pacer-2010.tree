\import{base-macros}

\title{PACER: proportional detection of data races}
\date{2010-6}
\taxon{reference}

\author{Michael D. Bond}
\author{Katherine E. Coons}
\author{Kathryn S. McKinley}
\tag{racepred}
\tag{sampling-race}
\tag{paper}
\meta{bibtex}\verb<<<|
@article{10.1145/1809028.1806626,
author = {Bond, Michael D. and Coons, Katherine E. and McKinley, Kathryn S.},
title = {PACER: proportional detection of data races},
year = {2010},
issue_date = {June 2010},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {45},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/1809028.1806626},
doi = {10.1145/1809028.1806626},
abstract = {Data races indicate serious concurrency bugs such as order, atomicity, and sequential consistency violations. Races are difficult to find and fix, often manifesting only after deployment. The frequency and unpredictability of these bugs will only increase as software adds parallelism to exploit multicore hardware. Unfortunately, sound and precise race detectors slow programs by factors of eight or more and do not scale to large numbers of threads.This paper presents a precise, low-overhead sampling-based data race detector called Pacer. PACER makes a proportionality guarantee: it detects any race at a rate equal to the sampling rate, by finding races whose first access occurs during a global sampling period. During sampling, PACER tracks all accesses using the dynamically sound and precise FastTrack algorithm. In nonsampling periods, Pacer discards sampled access information that cannot be part of a reported race, and Pacer simplifies tracking of the happens-before relationship, yielding near-constant, instead of linear, overheads. Experimental results confirm our theoretical guarantees. PACER reports races in proportion to the sampling rate. Its time and space overheads scale with the sampling rate, and sampling rates of 1-3\% yield overheads low enough to consider in production software. The resulting system provides a "get what you pay for" approach that is suitable for identifying real, hard-to-reproduce races in deployed systems.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {255–268},
numpages = {14},
keywords = {bugs, concurrency, data races, sampling}
}

@inproceedings{10.1145/1806596.1806626,
author = {Bond, Michael D. and Coons, Katherine E. and McKinley, Kathryn S.},
title = {PACER: proportional detection of data races},
year = {2010},
isbn = {9781450300193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1806596.1806626},
doi = {10.1145/1806596.1806626},
abstract = {Data races indicate serious concurrency bugs such as order, atomicity, and sequential consistency violations. Races are difficult to find and fix, often manifesting only after deployment. The frequency and unpredictability of these bugs will only increase as software adds parallelism to exploit multicore hardware. Unfortunately, sound and precise race detectors slow programs by factors of eight or more and do not scale to large numbers of threads.This paper presents a precise, low-overhead sampling-based data race detector called Pacer. PACER makes a proportionality guarantee: it detects any race at a rate equal to the sampling rate, by finding races whose first access occurs during a global sampling period. During sampling, PACER tracks all accesses using the dynamically sound and precise FastTrack algorithm. In nonsampling periods, Pacer discards sampled access information that cannot be part of a reported race, and Pacer simplifies tracking of the happens-before relationship, yielding near-constant, instead of linear, overheads. Experimental results confirm our theoretical guarantees. PACER reports races in proportion to the sampling rate. Its time and space overheads scale with the sampling rate, and sampling rates of 1-3\% yield overheads low enough to consider in production software. The resulting system provides a "get what you pay for" approach that is suitable for identifying real, hard-to-reproduce races in deployed systems.},
booktitle = {Proceedings of the 31st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {255–268},
numpages = {14},
keywords = {bugs, concurrency, data races, sampling},
location = {Toronto, Ontario, Canada},
series = {PLDI '10}
}<<<

\meta{doi}{10.1145/1809028.1806626}