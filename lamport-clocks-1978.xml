<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>446</fr:anchor><fr:addr
type="user">lamport-clocks-1978</fr:addr><fr:route>lamport-clocks-1978.xml</fr:route><fr:title
text="Time, clocks, and the ordering of events in a distributed system">Time, clocks, and the ordering of events in a distributed system</fr:title><fr:taxon>Reference</fr:taxon><fr:date><fr:year>1978</fr:year><fr:month>7</fr:month></fr:date><fr:authors><fr:author>Leslie Lamport</fr:author></fr:authors><fr:meta
name="bibtex"><![CDATA[@article{10.1145/359545.359563,
author = {Lamport, Leslie},
title = {Time, clocks, and the ordering of events in a distributed system},
year = {1978},
issue_date = {July 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {7},
issn = {0001-0782},
url = {https://doi.org/10.1145/359545.359563},
doi = {10.1145/359545.359563},
abstract = {The concept of one event happening before another in a distributed system is examined, and is shown to define a partial ordering of the events. A distributed algorithm is given for synchronizing a system of logical clocks which can be used to totally order the events. The use of the total ordering is illustrated with a method for solving synchronization problems. The algorithm is then specialized for synchronizing physical clocks, and a bound is derived on how far out of synchrony the clocks can become.},
journal = {Commun. ACM},
month = {jul},
pages = {558â€“565},
numpages = {8},
keywords = {multiprocess systems, distributed systems, computer networks, clock synchronization}
}]]></fr:meta><fr:meta
name="doi">10.1145/359545.359563</fr:meta></fr:frontmatter><fr:mainmatter /><fr:backmatter /></fr:tree>