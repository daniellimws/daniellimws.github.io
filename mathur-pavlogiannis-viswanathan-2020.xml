<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree
toc="true"
numbered="true"
show-heading="true"
show-metadata="true"
expanded="true"
root="false"
xmlns:fr="http://www.jonmsterling.com/jms-005P.xml"><fr:frontmatter><fr:anchor>506</fr:anchor><fr:addr
type="user">mathur-pavlogiannis-viswanathan-2020</fr:addr><fr:route>mathur-pavlogiannis-viswanathan-2020.xml</fr:route><fr:title
text="The Complexity of Dynamic Data Race Prediction">The Complexity of Dynamic Data Race Prediction</fr:title><fr:taxon>Reference</fr:taxon><fr:date><fr:year>2020</fr:year><fr:month>7</fr:month></fr:date><fr:authors><fr:author><fr:link
type="local"
href="umangmathur.xml"
addr="umangmathur"
title="Umang Mathur">Umang Mathur</fr:link></fr:author><fr:author><fr:link
type="local"
href="andreaspavlogiannis.xml"
addr="andreaspavlogiannis"
title="Andreas Pavlogiannis">Andreas Pavlogiannis</fr:link></fr:author><fr:author><fr:link
type="local"
href="maheshviswanathan.xml"
addr="maheshviswanathan"
title="Mahesh Viswanathan">Mahesh Viswanathan</fr:link></fr:author></fr:authors><fr:meta
name="bibtex"><![CDATA[@inproceedings{10.1145/3373718.3394783,
author = {Mathur, Umang and Pavlogiannis, Andreas and Viswanathan, Mahesh},
title = {The Complexity of Dynamic Data Race Prediction},
year = {2020},
isbn = {9781450371049},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3373718.3394783},
doi = {10.1145/3373718.3394783},
abstract = {Writing concurrent programs is notoriously hard due to scheduling non-determinism. The most common concurrency bugs are data races, which are accesses to a shared resource that can be executed concurrently. Dynamic data-race prediction is the most standard technique for detecting data races: given an observed, data-race-free trace t, the task is to determine whether t can be reordered to a trace t* that exposes a data-race. Although the problem has received significant practical attention for over three decades, its complexity has remained elusive. In this work, we address this lacuna, identifying sources of intractability and conditions under which the problem is efficiently solvable. Given a trace t of size n over k threads, our main results are as follows.First, we establish a general O(k · n2·(k-1) upper-bound, as well as an O(nk) upper-bound when certain parameters of t are constant. In addition, we show that the problem is NP-hard and even W[1]-hard parameterized by k, and thus unlikely to be fixed-parameter tractable. Second, we study the problem over acyclic communication topologies, such as server-clients hierarchies. We establish an O(k2 · d · n2 · log n) upper-bound, where d is the number of shared variables accessed in t. In addition, we show that even for traces with k = 2 threads, the problem has no O(n2-ϵ) algorithm under the Orthogonal Vectors conjecture. Since any trace with 2 threads defines an acyclic topology, our upper-bound for this case is optimal up to polynomial improvements for up to moderate values of k and d. Finally, motivated by existing heuristics, we study a distance-bounded version of the problem, where the task is to expose a data race by a witness trace that is similar to t. We develop an algorithm that works in O(n) time when certain parameters of t are constant.},
booktitle = {Proceedings of the 35th Annual ACM/IEEE Symposium on Logic in Computer Science},
pages = {713–727},
numpages = {15},
keywords = {Complexity, Data Race Prediction},
location = {Saarbr\"{u}cken, Germany},
series = {LICS '20}
}]]></fr:meta><fr:meta
name="doi">10.1145/3373718.3394783</fr:meta></fr:frontmatter><fr:mainmatter /><fr:backmatter /></fr:tree>